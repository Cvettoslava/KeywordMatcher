If the keyword contains a "*" in the middle of a word, what we should do?

"""
def match?(text, keyword) do
    #keyword = "_?+"
    #text = "the quick brown sFox jumps over the lazy dog cats"
  
    keyword = String.replace(keyword, ~r/\sAND\s/," ")
    keyword = String.replace(keyword, "(", "") 
    keyword = String.replace(keyword, ")", "")

     results = {}
     |> Tuple.append(has_and(keyword))
     |> Tuple.append(has_or(keyword))
     |> Tuple.append(has_wildcard(keyword))
   
     case results do
       {nil, nil, []} -> match_single_term?(text, keyword)                      
       {:ok, nil, _} -> helper_f_AND?(text, keyword)
       {_, :ok, _} -> helper_f_OR?(text,keyword)
       {nil, nil, true} -> Regex.match?(~r/#{keyword}/i, text)
     end
	end

  def helper_f_AND?(text, keyword) do
    list_with_wc = has_wildcard(keyword)
    list_without_wc = Regex.split(~r{\s}, keyword)
    list_without_wc = Enum.reject(list_without_wc, fn x -> String.match?(x, ~r/\*/i) end)
    list_without_wc = Enum.map(list_without_wc, fn x -> String.replace(x, ~r/\W/,"")end)
    case Enum.empty?(list_with_wc) do
      true -> list = Enum.map(list_without_wc, fn x -> Regex.match?(~r/\b#{x}\b/iu, text) end)
              case Enum.member?(list, false) do
                true -> false
                false -> true
              end
      false -> list1 = Enum.map(list_without_wc, fn x -> Regex.match?(~r/\b#{x}\b/i, text) end) #list_without_wc
               list2 = Enum.map(list_with_wc, fn x -> text =~ ~r/#{x}/i end)
               case Enum.member?(list1, false) || Enum.member?(list2, false) do
                true -> false
                false -> true
              end 
    end
  end

  defp helper_f_OR?(text, keyword) do
    list_k = Regex.split(~r{\sOR\s}i, keyword)
    list =  Enum.map(list_k, fn x -> helper_f_AND?(text, x) end) 
    case Enum.member?(list, true) do
      true -> true
      false -> false
    end
  end

  defp match_single_term?(text, keyword) do
    is_word = Regex.match?(~r/^[[:alpha:]]+$/, keyword)
    case is_word do
      true -> case Regex.match?(~r/\b#{keyword}\b/i, text) do
        true -> true
        false -> false
      end
    false -> false
    end    
  end

  def has_wildcard(keyword) do
    case Regex.match?(~r/\w\*/i, keyword) do
      true -> case Regex.match?(~r/\s/i, keyword) do
        true-> list_with_wc = Enum.filter(Regex.split(~r{\s}, keyword), fn x -> Regex.match?(~r/\w\*/i, x) end)
               Enum.map(list_with_wc, fn x -> String.replace(x, "*","") end)
        false -> true
      end 
      false -> []
    end
  end

  def has_and(keyword) do
    case Regex.match?(~r/\s/, keyword) do
      true -> IO.puts("caught AND")
      false -> nil
    end
  end

  #
  defp has_or(keyword) do
    case Regex.match?(~r/\sOR\s/i, keyword) do
      true -> IO.puts("caught OR")
      false -> nil
    end
  end
  
end
"""